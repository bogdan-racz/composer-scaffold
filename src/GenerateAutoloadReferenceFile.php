<?php

namespace Grasmash\ComposerScaffold;

use Composer\Script\Event;
use Composer\Composer;
use Composer\EventDispatcher\EventSubscriberInterface;
use Composer\IO\IOInterface;
use Composer\Plugin\Capable;
use Composer\Plugin\PluginInterface;
use Composer\Script\ScriptEvents;
use Composer\Util\Filesystem;
use Symfony\Component\Filesystem\Filesystem as SymfonyFilesystem;

/**
 * Generates an 'autoload.php' that includes the autoloader created by Composer.
 */
class GenerateAutoloadReferenceFile {

  protected $composer;

  /**
   * GenerateAutoloadReferenceFile constructor.
   *
   * @param \Composer\Composer $composer
   *   Reference to the 'Composer' object.
   */
  public function __construct(Composer $composer) {
    $this->composer = $composer;
  }

  /**
   * Generate the autoload file at the specified location.
   *
   * This only writes a bit of PHP that includes the autoload file that
   * Composer generated. Drupal does this so that it can guarentee that there
   * will always be an `autoload.php` file in a well-known location.
   *
   * @param string $location
   *   Where to write the autoload file.
   */
  public function generateAutoload(string $location) {
    $vendorPath = $this->getVendorPath();

    // Calculate the relative path from the webroot (location of the project
    // autoload.php) to the vendor directory.
    $fs = new SymfonyFilesystem();
    $relativeVendorPath = $fs->makePathRelative($vendorPath, realpath($location));

    $fs->dumpFile($location . "/autoload.php", $this->autoLoadContents($relativeVendorPath));
  }

  /**
   * Build the contents of the autoload file.
   *
   * @return string
   *   Return the contents for the autoload.php.
   */
  protected function autoLoadContents(string $relativeVendorPath) : string {
    $relativeVendorPath = rtrim($relativeVendorPath, '/');

    return <<<EOF
<?php

/**
 * @file
 * Includes the autoloader created by Composer.
 *
 * This file was generated by composer-scaffold.
 *.
 * @see composer.json
 * @see index.php
 * @see core/install.php
 * @see core/rebuild.php
 * @see core/modules/statistics/statistics.php
 */

return require __DIR__ . '/$relativeVendorPath/autoload.php';

EOF;
  }

  /**
   * Get the path to the 'vendor' directory.
   *
   * @return string
   *   The file path of the vendor directory.
   */
  public function getVendorPath() {
    $vendorDir = $this->composer->getConfig()->get('vendor-dir');
    $filesystem = new Filesystem();
    $filesystem->ensureDirectoryExists($vendorDir);
    return $filesystem->normalizePath(realpath($vendorDir));
  }

}
