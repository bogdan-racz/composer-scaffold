<?php

namespace Grasmash\ComposerScaffold;

use Composer\Package\Package;
use Composer\Script\Event;
use Composer\Plugin\CommandEvent;
use Composer\Composer;
use Composer\EventDispatcher\EventDispatcher;
use Composer\IO\IOInterface;
use Composer\Util\Filesystem;
use Symfony\Component\Filesystem\Filesystem as SymfonyFilesystem;

/**
 * Core class of the plugin, contains all logic which files should be fetched.
 */
class Handler {

  const PRE_COMPOSER_SCAFFOLD_CMD = 'pre-composer-scaffold-cmd';
  const POST_COMPOSER_SCAFFOLD_CMD = 'post-composer-scaffold-cmd';

  /**
   * @var \Composer\Composer
   */
  protected $composer;

  /**
   * @var \Composer\IO\IOInterface
   */
  protected $io;

  /**
   * @var bool
   *
   * A boolean indicating if progress should be displayed.
   */
  protected $progress;

  protected $allowedPackages;

  /**
   * Handler constructor.
   *
   * @param \Composer\Composer $composer
   * @param \Composer\IO\IOInterface $io
   */
  public function __construct(Composer $composer, IOInterface $io) {
    $this->composer = $composer;
    $this->io = $io;
    $this->progress = TRUE;
  }

  /**
   * Get the command options.
   *
   * @param \Composer\Plugin\CommandEvent $event
   */
  public function onCmdBeginsEvent(CommandEvent $event) {
    if ($event->getInput()->hasOption('no-progress')) {
      $this->progress = !($event->getInput()->getOption('no-progress'));
    }
    else {
      $this->progress = TRUE;
    }
  }

  /**
   * Post install command event to execute the scaffolding.
   *
   * @param \Composer\Script\Event $event
   */
  public function onPostCmdEvent(Event $event) {
    if (isset($this->drupalCorePackage)) {
      $this->copyAllFiles();
      // Generate the autoload.php file after generating the scaffold files.
      $this->generateAutoload();
    }
  }

  public function getPackageFileMappings(Package $package) {
    $package_extra = $package->getExtra();
    $package_file_mappings = $package_extra['composer-scaffold']['file-mapping'];

    return $package_file_mappings;
  }

  /**
   * Downloads drupal scaffold files for the current process.
   */
  public function copyAllFiles() {
    // Call any pre-scaffold scripts that may be defined.
    $dispatcher = new EventDispatcher($this->composer, $this->io);
    $dispatcher->dispatch(self::PRE_COMPOSER_SCAFFOLD_CMD);

    $this->allowedPackages = $this->getAllowedPackages();
    $file_mappings = $this->getFileMappingsFromPackages($this->allowedPackages);
    $file_mappings = $this->replaceWebRootToken($file_mappings);
    $this->copyFiles($file_mappings);

    // Call post-scaffold scripts.
    $dispatcher->dispatch(self::POST_COMPOSER_SCAFFOLD_CMD);
  }

  /**
   * Generate the autoload file at the project root.  Include the
   * autoload file that Composer generated.
   */
  public function generateAutoload() {
    $vendorPath = $this->getVendorPath();
    $webroot = $this->getWebRoot();

    // Calculate the relative path from the webroot (location of the
    // project autoload.php) to the vendor directory.
    $fs = new SymfonyFilesystem();
    $relativeVendorPath = $fs->makePathRelative($vendorPath, realpath($webroot));

    $fs->dumpFile($webroot . "/autoload.php", $this->autoLoadContents($relativeVendorPath));
  }

  /**
   * Build the contents of the autoload file.
   *
   * @return string
   */
  protected function autoLoadContents($relativeVendorPath) {
    $relativeVendorPath = rtrim($relativeVendorPath, '/');

    $autoloadContents = <<<EOF
<?php

/**
 * @file
 * Includes the autoloader created by Composer.
 *
 * This file was generated by drupal-composer/drupal-scaffold.
 * https://github.com/drupal-composer/drupal-scaffold
 *
 * @see composer.json
 * @see index.php
 * @see core/install.php
 * @see core/rebuild.php
 * @see core/modules/statistics/statistics.php
 */

return require __DIR__ . '/$relativeVendorPath/autoload.php';

EOF;
    return $autoloadContents;
  }

  /**
   * Get the path to the 'vendor' directory.
   *
   * @return string
   */
  public function getVendorPath() {
    $config = $this->composer->getConfig();
    $filesystem = new Filesystem();
    $filesystem->ensureDirectoryExists($config->get('vendor-dir'));
    $vendorPath = $filesystem->normalizePath(realpath($config->get('vendor-dir')));

    return $vendorPath;
  }

  /**
   * Retrieve the path to the web root.
   *
   * @return string
   */
  public function getWebRoot() {
    $options = $this->getOptions();
    // @todo Throw exception if this array key is missing.
    $webroot = $options['locations']['web-root'];

    return $webroot;
  }

  /**
   * Retrieve a package from the current composer process.
   *
   * @param string $name
   *   Name of the package to get from the current composer installation.
   *
   * @return \Composer\Package\PackageInterface
   */
  protected function getPackage($name) {
    $package =  $this->composer->getRepositoryManager()->getLocalRepository()->findPackage($name, '*');
    if (is_null($package)) {
      $this->io->write("<comment>Composer Scaffold could not find installed package with name $name. No files were copied.</comment>");
    }

    return $package;
  }

  /**
   * Retrieve options from optional "extra" configuration.
   *
   * @return array
   */
  protected function getOptions() {
    $extra = $this->composer->getPackage()->getExtra() + ['composer-scaffold' => []];
    $options = $extra['composer-scaffold'] + [
      "allowed-packages" => [],
      "locations" => [],
      "symlink" => false,
      "file-mapping" => [],
    ];
    return $options;
  }

  /**
   * Merges arrays recursively while preserving.
   *
   * @param array $array1
   *   The first array.
   * @param array $array2
   *   The second array.
   *
   * @return array
   *   The merged array.
   *
   * @see http://php.net/manual/en/function.array-merge-recursive.php#92195
   */
  public static function arrayMergeRecursiveDistinct(
    array &$array1,
    array &$array2
  ) {
    $merged = $array1;
    foreach ($array2 as $key => &$value) {
      if (is_array($value) && isset($merged[$key]) && is_array($merged[$key])) {
        $merged[$key] = self::arrayMergeRecursiveDistinct($merged[$key],
          $value);
      }
      else {
        $merged[$key] = $value;
      }
    }
    return $merged;
  }

  /**
   * @param $file_mappings
   *
   * @return array
   */
  protected function replaceWebRootToken($file_mappings) {
    $webroot = realpath($this->getWebRoot());
    foreach ($file_mappings as $package_name => $files) {
      foreach ($files as $source => $target) {
        if (is_string($target)) {
          $file_mappings[$package_name][$source] = str_replace('[web-root]', $webroot, $target);
        }
      }
    }
    return $file_mappings;
  }

  /**
   * @param $file_mappings
   */
  protected function copyFiles($file_mappings): void {
    foreach ($file_mappings as $package_name => $files) {
      foreach ($files as $source => $target) {
        if ($target && $this->getAllowedPackage($package_name)) {
          $source_path = $this->getVendorPath() . '/' . $package_name . '/' . $source;
          if (!file_exists($source)) {
            $this->io->writeError("Could not find source file $source for package $package_name");
          }
          copy($source_path, $target);
        }
      }
    }
  }

  public function getAllowedPackage($package_name) {
    if (array_key_exists($package_name, $this->allowedPackages)) {
      return $this->allowedPackages[$package_name];
    }

    return null;
  }

  /**
   * @param $allowed_packages
   *
   * @return array
   */
  protected function getFileMappingsFromPackages($allowed_packages): array {
    $file_mappings = [];
    foreach ($allowed_packages as $name => $package) {
      $package_file_mappings = $this->getPackageFileMappings($package);
      $file_mappings = self::arrayMergeRecursiveDistinct($file_mappings,
        $package_file_mappings);
    }
    return $file_mappings;
  }

  /**
   * @return array
   */
  protected function getAllowedPackages(): array {
    $options = $this->getOptions();
    $allowed_packages_list = $options['allowed-packages'];

    $allowed_packages = [];
    foreach ($allowed_packages_list as $name) {
      $package = $this->getPackage($name);
      if (!is_null($package)) {
        $allowed_packages[$name] = $package;
      }
    }

    // Add root package at end.
    $allowed_packages[$this->composer->getPackage()
      ->getName()] = $this->composer->getPackage();

    return $allowed_packages;
  }

}